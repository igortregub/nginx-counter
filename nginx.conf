user  root;
worker_processes  1;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    lua_package_path "/usr/local/lib/lua/resty/redis.lua;;";

    server {
        listen       80;

        root   /var/www;
        index  index.html index.htm;


        location /users {
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000)
                red:connect("127.0.0.1", 6379)

                local count = red:hlen("users")
                ngx.header["Content-Type"] = "text/plain"
                ngx.say("Total count of users: " .. count)
            }
        }

        location /pages {
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000)
                red:connect("127.0.0.1", 6379)

                ngx.header["Content-Type"] = "text/plain"

                ngx.say("Total statistic for pages")

                local pages = red:HKEYS("pages")
                for key,value in pairs(pages) do
                    local count = red:HGET("pages", value)
                    ngx.say("page: " .. value .. " count: " .. count)
                end
            }
        }

        location / {
            rewrite_by_lua '
                local h = ngx.req.get_headers()
                local userAgent = h["User-Agent"]
                local user = userAgent .. "IP" .. ngx.var.remote_addr

                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000)
                red:connect("127.0.0.1", 6379)
                red:hsetnx("users", user, 1)
                red:HINCRBY("pages", ngx.var.uri, 1)
            ';
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }

}
